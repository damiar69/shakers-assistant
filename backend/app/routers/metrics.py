"""
Metrics router module exposing evaluation results as a REST endpoint.

1. Defines a dedicated `/metrics/summary` GET endpoint for retrieval of evaluation metrics.
2. Dynamically resolves the path to `evaluation/metrics_summary.json` relative to the module.
3. Returns a 404 error if the metrics file is missing, guiding users to run the evaluation script.
4. Wraps file I/O in try/except to return a 500 error on read failures with a clear message.
5. Uses FastAPI’s JSONResponse for correct JSON content delivery.
"""

from fastapi import APIRouter, HTTPException
from fastapi.responses import JSONResponse
import os
import json

router = APIRouter(prefix="/metrics", tags=["Metrics"])


# ─────────────────────────────────────────────────────────────────────────────
# GET /metrics/summary endpoint
# ─────────────────────────────────────────────────────────────────────────────
@router.get("/summary")
async def metrics_summary():
    """
    Returns the evaluation metrics (JSON) generated by evaluation/evaluate.py
    """

    # 1) Locate evaluation/metrics_summary.json
    metrics_path = os.path.abspath(
        os.path.join(
            os.path.dirname(__file__),
            "..",
            "..",
            "..",
            "evaluation",
            "metrics_summary.json",
        )
    )

    # 2) If the metrics file does not exist, return 404
    if not os.path.exists(metrics_path):
        raise HTTPException(
            status_code=404,
            detail="Metrics summary not found. Run evaluation/evaluate.py first.",
        )

    # 3) Load and return the metrics JSON
    try:
        with open(metrics_path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error reading metrics: {e}")

    return JSONResponse(content=data)
